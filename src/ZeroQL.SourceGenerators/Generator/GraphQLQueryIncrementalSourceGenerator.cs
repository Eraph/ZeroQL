using System;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ZeroQL.SourceGenerators.Resolver;

namespace ZeroQL.SourceGenerators.Generator;

[Generator]
public class GraphQLQueryIncrementalSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var invocations = context.SyntaxProvider
            .CreateSyntaxProvider(FindMethods, (c, ct) => (Invocation: (InvocationExpressionSyntax)c.Node, c.SemanticModel));

        context.RegisterSourceOutput(invocations, GenerateSource);
    }

    private void GenerateSource(
        SourceProductionContext context,
        (InvocationExpressionSyntax Invocation, SemanticModel SemanticModel) invocation)
    {
        var uniqId = Guid.NewGuid().ToString("N");
        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var semanticModel = invocation.SemanticModel;
        var queryMethod = QueryAnalyzerHelper.ExtractQueryMethod(semanticModel.Compilation, invocation.Invocation);
        if (queryMethod is null)
        {
            return;
        }

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var argumentSyntax = invocation.Invocation.ArgumentList.Arguments.Last();
        var key = argumentSyntax.ToString();
        var query = GraphQLQueryResolver.Resolve(semanticModel, argumentSyntax.Expression, context.CancellationToken);
        if (query.Error is ErrorWithData<Diagnostic> error)
        {
            context.ReportDiagnostic(error.Data);
            return;
        }

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var source = $@"// This file generated for ZeroQL.
// <auto-generated/>
using System;
using ZeroQL.Core;

namespace {semanticModel.Compilation.Assembly.Name}
{{
    {SourceGeneratorInfo.CodeGenerationAttribute}
    public static class ZeroQLModuleInitializer_{uniqId}
    {{
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {{
            GraphQLQueryStore.Query[{SyntaxFactory.Literal(key).Text}] = {SyntaxFactory.Literal(query.Value).Text};
        }}
    }}
}}";

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        context.AddSource($"ZeroQLModuleInitializer.{uniqId}.g.cs", source);
    }

    private bool FindMethods(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        if (syntaxNode is not InvocationExpressionSyntax invocation)
        {
            return false;
        }

        if (invocation.Expression is MemberAccessExpressionSyntax memberAccess &&
            memberAccess.Name.ToString() is "Query" or "Mutation")
        {
            return true;
        }

        return false;
    }
}