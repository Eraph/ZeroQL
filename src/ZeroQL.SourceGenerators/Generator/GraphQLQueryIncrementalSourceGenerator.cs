using System;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ZeroQL.SourceGenerators.Resolver;

namespace ZeroQL.SourceGenerators.Generator;

[Generator]
public class GraphQLQueryIncrementalSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var invocations = context.SyntaxProvider
            .CreateSyntaxProvider(FindMethods, (c, ct) => (Invocation: (InvocationExpressionSyntax)c.Node, c.SemanticModel));

        context.RegisterImplementationSourceOutput(invocations, GenerateSource);
    }

    private void GenerateSource(
        SourceProductionContext context,
        (InvocationExpressionSyntax Invocation, SemanticModel SemanticModel) input)
    {
        var (invocation, semanticModel) = input;
        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var resolver = new GraphQLQueryContainerResolver();
        var error = resolver.Resolve(invocation, semanticModel, context.CancellationToken);
        if (error)
        {
            if (error is ErrorWithData<Diagnostic> errorWithData)
            {
                context.ReportDiagnostic(errorWithData.Data);
                return;
            }

            context.ReportDiagnostic(
                Diagnostic.Create(
                    Descriptors.FailedToConvert,
                    invocation
                        .ArgumentList
                        .Arguments
                        .First()
                        .Expression
                        .GetLocation()));
            return;
        }

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var uniqId = Guid.NewGuid().ToString("N");
        var graphQLInputTypeSafeName = resolver.GraphQLInputSymbol.ToSafeGlobalName();
        var typeInfo = resolver.UploadPropeties.ToDictionary(o => o.Type.ToSafeGlobalName());
        var source = $@"// This file generated for ZeroQL.
// <auto-generated/>
using System;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Net.Http;
using ZeroQL;
using ZeroQL.Stores;
using ZeroQL.Internal;

namespace {semanticModel.Compilation.Assembly.Name}
{{
    {SourceGeneratorInfo.CodeGenerationAttribute}
    public static class ZeroQLModuleInitializer_{uniqId}
    {{
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {{
            GraphQLQueryStore<{resolver.RequestExecutorQueryType}>.Query[{SyntaxFactory.Literal(resolver.Key).Text}] = Execute;
        }}

        public static async Task<GraphQLResult<{resolver.RequestExecutorQueryType}>> Execute(HttpClient httpClient, string? operationName, object variablesObject)
        {{
            var queryBody = {SyntaxFactory.Literal(resolver.QueryBody).Text};
            var variables = ({resolver.RequestExecutorInputArgumentSymbol.ToGlobalName()})variablesObject;
            
            var stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(""{resolver.OperationKind} "");
            if (!string.IsNullOrEmpty(operationName))
            {{
                stringBuilder.Append(operationName);
            }}
            stringBuilder.Append(queryBody);

            var query = stringBuilder.ToString();
            var queryRequest = new GraphQLRequest
            {{
                Variables = variables,
                Query = query
            }};

            {GraphQLUploadResolver.GenerateRequestPreparations(graphQLInputTypeSafeName, typeInfo)}

            var responseJson = await response.Content.ReadAsStringAsync();
            var qlResponse = JsonSerializer.Deserialize<GraphQLResponse<{resolver.RequestExecutorQueryType}>>(responseJson, ZeroQLJsonOptions.Options);

            if (qlResponse is null)
            {{
                return new GraphQLResult<{resolver.RequestExecutorQueryType}>
                {{
                    Errors = new[]
                    {{
                        new GraphQueryError {{ Message = ""Failed to deserialize response: "" + responseJson }}
                    }}
                }};
            }}

            if (qlResponse.Errors?.Length > 0)
            {{
                return new GraphQLResult<{resolver.RequestExecutorQueryType}>
                {{
                    Query = query,
                    Errors = qlResponse.Errors
                }};
            }}

            return new GraphQLResult<{resolver.RequestExecutorQueryType}>
            {{
                Query = query,
                Data = qlResponse.Data
            }};
        }}

        {GraphQLUploadResolver.GenerateUploadsSelectors(resolver.UploadPropeties, resolver.UploadType)}
    }}
}}";

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        context.AddSource($"ZeroQLModuleInitializer.{uniqId}.g.cs", source);
    }

    private bool FindMethods(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        if (syntaxNode is not InvocationExpressionSyntax invocation)
        {
            return false;
        }

        if (invocation.Expression is MemberAccessExpressionSyntax memberAccess &&
            memberAccess.Name.ToString() is "Query" or "Mutation")
        {
            return true;
        }

        return false;
    }
}