using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ZeroQL.SourceGenerators.Resolver;

namespace ZeroQL.SourceGenerators.Generator;

[Generator]
public class GraphQLQueryIncrementalSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var invocations = context.SyntaxProvider
            .CreateSyntaxProvider(FindMethods, (c, ct) => (Invocation: (InvocationExpressionSyntax)c.Node, c.SemanticModel));

        context.RegisterImplementationSourceOutput(invocations, GenerateSource);
    }

    private void GenerateSource(
        SourceProductionContext context,
        (InvocationExpressionSyntax Invocation, SemanticModel SemanticModel) input)
    {
        var (invocation, semanticModel) = input;
        var uniqId = Guid.NewGuid().ToString("N");
        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var resolver = new GraphQLQueryContainerResolver();
        var error = resolver.Resolve(invocation, semanticModel, context.CancellationToken);
        if (error)
        {
            if (error is ErrorWithData<Diagnostic> errorWithData)
            {
                context.ReportDiagnostic(errorWithData.Data);
                return;
            }

            context.ReportDiagnostic(
                Diagnostic.Create(
                    Descriptors.FailedToConvert,
                    invocation
                        .ArgumentList
                        .Arguments
                        .First()
                        .Expression
                        .GetLocation()));
            return;
        }

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        var graphQLInputTypeSafeName = resolver.GraphQLInputSymbol.ToSafeGlobalName();
        var typeInfo = resolver.UploadPropeties.ToDictionary(o => o.Type.ToSafeGlobalName());
        var source = $@"// This file generated for ZeroQL.
// <auto-generated/>
using System;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Net.Http;
using ZeroQL.Core;
using ZeroQL.Core.Stores;
using ZeroQL.Core.Internal;

namespace {semanticModel.Compilation.Assembly.Name}
{{
    {SourceGeneratorInfo.CodeGenerationAttribute}
    public static class ZeroQLModuleInitializer_{uniqId}
    {{
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {{
            GraphQLQueryStore<{resolver.RequestExecutorQueryType}>.Query[{SyntaxFactory.Literal(resolver.Key).Text}] = Execute;
        }}

        public static async Task<GraphQLResult<{resolver.RequestExecutorQueryType}>> Execute(HttpClient httpClient, string? operationName, object variablesObject)
        {{
            var queryBody = {SyntaxFactory.Literal(resolver.QueryBody).Text};
            var variables = ({resolver.RequestExecutorInputArgumentSymbol.ToGlobalName()})variablesObject;
            
            var stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(""{resolver.OperationKind} "");
            if (!string.IsNullOrEmpty(operationName))
            {{
                stringBuilder.Append(operationName);
            }}
            stringBuilder.Append(queryBody);

            var query = stringBuilder.ToString();
            var queryRequest = new GraphQLRequest
            {{
                Variables = variables,
                Query = query
            }};

            {GenerateRequestPreparations(graphQLInputTypeSafeName, typeInfo)}

            var responseJson = await response.Content.ReadAsStringAsync();
            var qlResponse = JsonSerializer.Deserialize<GraphQLResponse<{resolver.RequestExecutorQueryType}>>(responseJson, ZeroQLJsonOptions.Options);

            if (qlResponse is null)
            {{
                return new GraphQLResult<{resolver.RequestExecutorQueryType}>
                {{
                    Errors = new[]
                    {{
                        new GraphQueryError {{ Message = ""Failed to deserialize response: "" + responseJson }}
                    }}
                }};
            }}

            if (qlResponse.Errors?.Length > 0)
            {{
                return new GraphQLResult<{resolver.RequestExecutorQueryType}>
                {{
                    Query = query,
                    Errors = qlResponse.Errors
                }};
            }}

            return new GraphQLResult<{resolver.RequestExecutorQueryType}>
            {{
                Query = query,
                Data = qlResponse.Data
            }};
        }}

        {GenerateUploadsSelectors(resolver.UploadPropeties, resolver.UploadType)}
    }}
}}";

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        context.AddSource($"ZeroQLModuleInitializer.{uniqId}.g.cs", source);
    }

    private string GenerateUploadsSelectors(UploadInfoByType[] types, INamedTypeSymbol uploadType)
    {
        if (!types.Any())
        {
            return string.Empty;
        }
        
        var sb = new StringBuilder();

        foreach (var type in types)
        {
            sb.Append($@"
        private static void Process_{type.Type.ToSafeGlobalName()}(MultipartFormDataContentContext context, {type.Type.ToGlobalName()} value, string path)
        {{
{type.UploadProperties.Select(o => GenerateAccessor(type, o, uploadType)).JoinWithNewLine()}
        }}");

        }
        
        return sb.ToString();
    }

    private string GenerateAccessor(UploadInfoByType type, IPropertySymbol propertySymbol, INamedTypeSymbol uploadType)
    {
        return propertySymbol.Type switch
        {
            INamedTypeSymbol namedType when SymbolEqualityComparer.Default.Equals(namedType, uploadType) =>
$@"         
            if (value.{propertySymbol.Name} is not null)
            {{
                var index = context.Uploads.Count;
                var uploadEntry = new UploadEntry
                {{
                    Index = index,
                    Path = {GeneratePath(propertySymbol)},
                    Getter = () => (ZeroQL.Upload){GenerateGetter(propertySymbol)},
                }};
                context.Uploads.Add(uploadEntry);
            }}
",
            INamedTypeSymbol namedType => @$"Process_{namedType.ToSafeGlobalName()}(context, {GenerateGetter(propertySymbol)}, {GeneratePath(propertySymbol)});",
            _ => $@""
        };
    }

    private string GenerateGetter(IPropertySymbol propertySymbol)
    {
        return propertySymbol.Type switch
        {
            INamedTypeSymbol { IsAnonymousType: true } => $@"ZeroQLReflectionCache.Get(value, ""{propertySymbol.Name}"")",
            _ => $@"value.{propertySymbol.Name}",
        };
    }

    private string GeneratePath(IPropertySymbol propertySymbol)
    {
        return propertySymbol.Type switch
        {
            _ => $@"$""{{path}}.{propertySymbol.Name.FirstToLower()}""",
        };
    }

    private string GenerateRequestPreparations(string graphQLInputTypeName, Dictionary<string, UploadInfoByType> infoForTypes)
    {
        if (!infoForTypes.TryGetValue(graphQLInputTypeName, out var root))
        {
            return RequestWithoutUpload();
        }

        return $@"
            var context = new MultipartFormDataContentContext();
            Process_{root.Type.ToSafeGlobalName()}(context, variables, ""variables"");

            var form = new MultipartFormDataContent();

            var queryJson = JsonSerializer.Serialize(queryRequest, ZeroQLJsonOptions.Options);
            form.Add(new StringContent(queryJson), ""operations"");

            var map = context.Uploads.ToDictionary(o => o.Index,  o => new [] {{ o.Path }});
            var mapJson = JsonSerializer.Serialize(map, ZeroQLJsonOptions.Options);
            form.Add(new StringContent(mapJson), ""map"");
            foreach(var uploadInfo in context.Uploads)
            {{
                var upload = uploadInfo.Getter();
                form.Add(new StreamContent(upload.Stream), uploadInfo.Index.ToString(), upload.FileName);
            }};

            var response = await httpClient.PostAsync("""", form);";
    }

    private static string RequestWithoutUpload()
    {
        return @"
            var requestJson = JsonSerializer.Serialize(queryRequest, ZeroQLJsonOptions.Options);
            var response = await httpClient.PostAsync("""", new StringContent(requestJson, Encoding.UTF8, ""application/json""));";
    }

    private bool FindMethods(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        if (syntaxNode is not InvocationExpressionSyntax invocation)
        {
            return false;
        }

        if (invocation.Expression is MemberAccessExpressionSyntax memberAccess &&
            memberAccess.Name.ToString() is "Query" or "Mutation")
        {
            return true;
        }

        return false;
    }
}