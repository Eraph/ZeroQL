using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace ZeroQL.SourceGenerators.Generator;

[Generator]
public class GraphQLQuerySourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new QueryMethodSelector());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not QueryMethodSelector receiver)
        {
            return;
        }

        var queries = new Dictionary<string, string>();
        foreach (var invocation in receiver.Invocations)
        {
            if (context.CancellationToken.IsCancellationRequested)
            {
                return;
            }

            var semanticModel = context.Compilation.GetSemanticModel(invocation.SyntaxTree);
            var queryMethod = QueryAnalyzerHelper.ExtractQueryMethod(context.Compilation, invocation);
            if (queryMethod is null)
            {
                break;
            }

            if (context.CancellationToken.IsCancellationRequested)
            {
                return;
            }

            var argumentSyntax = invocation.ArgumentList.Arguments.Last();
            var key = argumentSyntax.ToString();
            var query = GraphQLQueryGenerator.Generate(semanticModel, argumentSyntax.Expression, context.CancellationToken);
            if (query.Error is ErrorWithData<Diagnostic> error)
            {
                context.ReportDiagnostic(error.Data);
                return;
            }

            if (context.CancellationToken.IsCancellationRequested)
            {
                return;
            }

            queries[key] = query.Value;
        }

        var source = @$"// This file generated for ZeroQL.
// <auto-generated/>
using System;
using ZeroQL.Core;

namespace {context.Compilation.Assembly.Name}
{{
    {SourceGeneratorInfo.CodeGenerationAttribute}
    public static class ZeroQLModuleInitializer
    {{
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {{
{queries.Select(o => $@"            GraphQLQueryStore.Query[{SyntaxFactory.Literal(o.Key).Text}] = {SyntaxFactory.Literal(o.Value).Text};").JoinWithNewLine()}
        }}
    }}
}}";

        if (context.CancellationToken.IsCancellationRequested)
        {
            return;
        }

        context.AddSource("ZeroQLModuleInitializer.g.cs", source);
    }
}